{"version":3,"sources":["components/ExperienceCards.js","components/HomeTabs.js","App.js","serviceWorker.js","index.js"],"names":["ExperienceCards","Card","className","Body","Title","Text","HomeTabs","class","href","target","rel","App","Helmet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAoCeA,MAhCf,WAEQ,OAAO,6BAAK,kBAACC,EAAA,EAAD,CAAMC,UAAY,eAC9B,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,KAAY,qEACZ,kBAACH,EAAA,EAAKI,KAAN,KACE,wBAAIH,UAAU,aAAd,0PAMN,kBAACD,EAAA,EAAD,CAAMC,UAAY,eAChB,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,KAAY,wDACZ,kBAACH,EAAA,EAAKI,KAAN,KACE,wBAAIH,UAAU,aAAd,0OAIN,kBAACD,EAAA,EAAD,CAAMC,UAAY,eAChB,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,KAAY,0DACZ,kBAACH,EAAA,EAAKI,KAAN,KACE,wBAAIH,UAAU,aAAd,wQCwCGI,MA9Df,WAGE,OAAO,yBAAKC,MAAM,mBAAkB,kBAAC,IAAD,KAClC,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,4BACA,kBAAC,IAAD,qBACA,kBAAC,IAAD,iBAGF,kBAAC,IAAD,KACA,yBAAKL,UAAU,eAAf,IAA8B,8eAM1B,yBAAKA,UAAU,eAAf,IAA8B,qCAC9B,uHACR,gIACA,yEACA,mEACA,6UAII,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,yBAAKA,UAAU,eAAc,4BAAI,wIACjC,yGACA,mIAMF,kBAAC,IAAD,KACE,yBAAKA,UAAU,eACX,4BAAI,4BAAK,uBAAGM,KAAK,2EAA2EC,OAAO,UAA1F,gCACT,qDACA,4BAAI,uBAEdD,KAAK,gDACLC,OAAO,SACPC,IAAI,uBAJU,0DAMd,4BAAI,uBACJF,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAHA,4C,QC9BWC,MAff,WACE,OAEE,yBAAKT,UAAU,OACb,kBAACU,EAAA,EAAD,KACI,+BAPI,aASR,yBAAKV,UAAU,cAAf,KAEA,kBAAC,EAAD,QCPcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.34c79183.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport \"../Tabs.css\";\r\n\r\nfunction ExperienceCards() \r\n{ \r\n        return <div><Card className = 'card-border'>\r\n        <Card.Body>\r\n          <Card.Title><h4>American Express Banking Application</h4></Card.Title>\r\n          <Card.Text>\r\n            <h6 className=\"tabs_desc\">Single Page Application to simply the manual work of account management across various regions for American Express Internal Employees.\r\n                Application was developed in React Js using HTML5, ES6 , Bootstrap, SASS and integration with RestFul APIs.\r\n            </h6>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n      <Card className = 'card-border'>\r\n        <Card.Body >\r\n          <Card.Title><h4>RightEverywhere Portal </h4></Card.Title>\r\n          <Card.Text>\r\n            <h6 className=\"tabs_desc\">The project uses JavaScript, JAVA, HTML5, CMS tool, Bootstrap, Email generation , CSS3, AJAX to give a proper website to the candidates who wants to enhance their skill to get better job or to build specefic skills to get job. </h6>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n      <Card className = 'card-border'>\r\n        <Card.Body>\r\n          <Card.Title><h4> British Telecoms Portal </h4></Card.Title>\r\n          <Card.Text>\r\n            <h6 className=\"tabs_desc\">Fleet Management of the trucking industry, insurance renewals of trucks, services due , accidental damages or off hour maintainance services across various locations in UK.\r\n            This portal is used to keep track of all the trucks and driver and their services.</h6>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n      </div>\r\n} \r\n\r\nexport default ExperienceCards;","import React from 'react'; \r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport \"../Tabs.css\";\r\nimport ExperienceCards from '../components/ExperienceCards';\r\n\r\n\r\nfunction HomeTabs() \r\n\r\n{ \r\n  return <div class=\"fluid-container\"><Tabs>\r\n    <TabList>\r\n      <Tab >About Me</Tab>\r\n      <Tab >Projects/Experience</Tab>\r\n      <Tab >Achievements</Tab>\r\n      <Tab >Contact</Tab>\r\n    </TabList>\r\n\r\n    <TabPanel>\r\n    <div className=\"description\"> <li>5 years experienced and highly creative front-end developer with bachelor’s degree in \r\n        computer science and expertise in handling client, managing team technically as well as \r\n        developing front end in different technologies across geo locations for finances, telecom,\r\n         retail, banking and career optimization portals. Designing User Interface (UI) web applications \r\n        using HTML5,CSS3, CSS2, CSS, XHTML, Java Script, Node.js, ReactJS, AJAX, JSON, MVC,JSP,JSR 286.</li>\r\n        </div>\r\n        <div className=\"description\"> <b>Skills</b>\r\n        <li>Data Management: MS Excel (Advanced), MS PowerPoint, Tableau, MySQL, WordPress, IBM CMS</li>\r\n<li>Programming: JAVA, HTML, JavaScript, ReactJS, CSS3, XML, SCSS, TypeScript, Node JS, RESTful APIs</li>\r\n<li>Servers: IBM WebSphere, Oracle WebCenter </li>\r\n<li>Project Management: Rally, SVN, GIT</li>\r\n<li>Other Skills: Risk Management, System Administration, User Acceptance Testing, Logic and Analysis, Problem solving and troubleshooting, Communication and public speaking, Training and Instruction, Leadership, Project Management, Critical Thinking, Attention to detail, Self-starter, Time management </li>\r\n\r\n        </div>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <ExperienceCards />\r\n    </TabPanel>\r\n    <TabPanel >\r\n      <div className=\"description\"><ul><li>Managed 4 major deployments with 0 escalations and minor defects with client’s appreciation emails.</li>\r\n      <li> “Insta” award for excellent performance; two times at Infosys.</li>\r\n      <li> “Appreciation Bonus” for contribution in business development; two times at Infosys. </li>\r\n         </ul>\r\n    \r\n\r\n      </div>\r\n    </TabPanel>\r\n    <TabPanel>\r\n      <div className=\"description\">\r\n          <ul><li ><a href=\"https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=gurjeev.pal@gmail.com\" target=\"_blank\">|| gurjeev.pal@gmail.com ||</a></li>\r\n          <li>|| +1-437-248-8353 ||</li>\r\n          <li><a\r\n\r\nhref=\"https://www.linkedin.com/in/gurjeev-pal-kaur/\"\r\ntarget=\"_blank\"\r\nrel=\"noopener noreferrer\"\r\n> || https://www.linkedin.com/in/gurjeev-pal-kaur/ || </a></li>\r\n<li><a\r\nhref=\"https://github.com/gurjeevpal\"\r\ntarget=\"_blank\"\r\nrel=\"noopener noreferrer\"\r\n>||https://github.com/gurjeevpal||</a></li>\r\n</ul>\r\n \r\n</div>\r\n    </TabPanel>\r\n  </Tabs></div>\r\n\r\n}\r\n\r\nexport default HomeTabs;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport HomeTabs from './components/HomeTabs';\r\n\r\nimport { faGetPocket } from '@fortawesome/free-brands-svg-icons';\r\nimport { Helmet } from 'react-helmet'\r\n\r\nconst TITLE = 'Porfolio'\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"app\">\r\n      <Helmet>\r\n          <title>{ TITLE }</title>\r\n        </Helmet>\r\n      <div className=\"app-header\"> </div> \r\n\r\n      <HomeTabs />\r\n   </div>\r\n    \r\n\r\n  );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}